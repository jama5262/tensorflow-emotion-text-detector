{"version":3,"sources":["redux/actions/index.js","utils/constants/actionContants.js","components/TextArea.jsx","components/MainEmotion.jsx","components/SubEmotion.jsx","pages/Home.jsx","utils/constants/baseUrlContant.js","redux/reducers/queryReducer.js","redux/reducers/mainEmotionReducer.js","redux/reducers/subEmotionReducer.js","redux/reducers/loadingReducer.js","redux/reducers/alertReducer.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js","App.jsx"],"names":["addMainEmotionAction","mainEmotion","type","addSubEmotionAction","subEmotion","loadingAction","loading","alertAction","data","TextArea","query","useSelector","state","dispatch","useDispatch","Form","Group","Control","as","rows","value","onChange","e","target","addQueryAction","MainEmotion","Object","keys","length","Row","Col","xs","Image","style","width","src","gif","rounded","emotion","fontSize","role","aria-label","emoji","marginTop","color","className","Math","round","probability","SubEmotion","subEmotions","map","key","textAlign","span","Home","alert","useEffect","variant","executeScroll","scrollRef","useRef","setTimeout","current","scrollIntoView","behavior","predictEmotion","getState","show","message","axios","method","baseURL","url","params","then","response","slice","max","catch","error","Container","md","Alert","offset","Button","disabled","onClick","Spinner","marginRight","animation","size","aria-hidden","ref","marginBottom","initialState","reducer","combineReducers","action","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a281865.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nimport * as types from \"../../utils/constants/actionContants\"\r\nimport { BASE_URL } from \"../../utils/constants/baseUrlContant\"\r\n\r\nexport const addQueryAction = query => ({ type: types.ADD_QUERY, query })\r\nexport const addMainEmotionAction = mainEmotion => ({ type: types.ADD_MAIN_EMOTION, mainEmotion })\r\nexport const addSubEmotionAction = subEmotion => ({ type: types.ADD_SUB_EMOTION, subEmotion })\r\nexport const loadingAction = loading => ({ type: types.LOADING, loading })\r\nexport const alertAction = data => ({ type: types.ALERT, data })\r\nexport const predictEmotionAction = () => {\r\n  return (dispatch, getState) => {\r\n    const { query } = getState()\r\n    dispatch(loadingAction(true))\r\n    dispatch(addMainEmotionAction({}))\r\n    dispatch(addSubEmotionAction([]))\r\n    dispatch(alertAction({\r\n      show: true,\r\n      message: \"Let hope this works 🤞\",\r\n      variant: \"warning\"\r\n    }))\r\n    axios({\r\n      method: 'post',\r\n      baseURL: BASE_URL,\r\n      url: '/predict',\r\n      params: {\r\n        query: query.query\r\n      }\r\n    })\r\n    .then((response) => {\r\n      dispatch(alertAction({\r\n        show: true,\r\n        message: \"Success 👍\",\r\n        variant: \"success\"\r\n      }))\r\n      dispatch(addMainEmotionAction(response.data.data[0]))\r\n      dispatch(addSubEmotionAction(response.data.data.slice(Math.max(response.data.data.length - 2, 1))))\r\n      dispatch(loadingAction(false))\r\n    })\r\n    .catch((error) => {\r\n      if (error.response) {\r\n        dispatch(alertAction({\r\n          show: true,\r\n          message: error.response.data.error + \" 😣\",\r\n          variant: \"danger\"\r\n        }))\r\n      } else {\r\n        dispatch(alertAction({\r\n          show: true,\r\n          message: error.message + \" 💀\",\r\n          variant: \"danger\"\r\n        }))\r\n      }\r\n      dispatch(loadingAction(false))\r\n    })\r\n  }\r\n}","export const ADD_QUERY = 'ADD_QUERY'\r\nexport const GET_EMOTION = 'GET_EMOTION'\r\nexport const ADD_MAIN_EMOTION = 'ADD_MAIN_EMOTION'\r\nexport const ADD_SUB_EMOTION = 'ADD_SUB_EMOTION'\r\nexport const LOADING = 'LOADING'\r\nexport const ALERT = 'ALERT'\r\nexport const SCROLL = 'SCROLL'","import React from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { addQueryAction } from \"../redux/actions\"\r\n\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nexport const TextArea = () => {\r\n\r\n  const query = useSelector((state) => state.query)\r\n  const dispatch = useDispatch()\r\n\r\n  const changeQuery = (value) => {\r\n    dispatch(addQueryAction(value))\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <Form.Group>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows=\"5\"\r\n          value={query.query}\r\n          onChange={(e) => changeQuery(e.target.value)}\r\n        />\r\n      </Form.Group>\r\n    </Form>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Row, Col, Image } from \"react-bootstrap\";\r\n\r\nexport const MainEmotion = () => {\r\n\r\n  const mainEmotion = useSelector(state => state.mainEmotion)\r\n\r\n  if (Object.keys(mainEmotion.data).length === 0) {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n  return (\r\n    <Row>\r\n      <Col xs={12}>\r\n        <Image style={{ width: \"500px\" }} src={ mainEmotion.data.gif } rounded />\r\n      </Col>\r\n      <Col xs={12}>\r\n        <span>{ mainEmotion.data.emotion } <span style={{ fontSize: \"30px\" }} role=\"img\" aria-label=\"emoji\">{ mainEmotion.data.emoji }</span></span>\r\n      </Col>\r\n      <Col xs={12} style={{ marginTop: \"10px\" }}>\r\n        <span style={{ color: \"#66BB6A\" }} className=\"display-4\">{ Math.round(mainEmotion.data.probability * 100) }%</span>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nexport const SubEmotion = () => {\r\n\r\n  const subEmotions = useSelector(state => state.subEmotions)\r\n\r\n  if (subEmotions.data.length === 0) {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n  return (\r\n    subEmotions.data.map((emotion) => {\r\n      return (\r\n        <Col key={ emotion.emotion } style={{ textAlign: \"center\", marginTop: \"50px\" }} xs={{ span: 3 }}>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <span className=\"display-4\" role=\"img\" aria-label=\"emoji\">{ emotion.emoji }</span>\r\n            </Col>\r\n            <Col xs={12} style={{ marginTop: \"15px\" }}>\r\n              <span>{ emotion.emotion }</span>\r\n            </Col>\r\n            <Col xs={12} style={{ marginTop: \"10px\" }}>\r\n              <span style={{ fontSize: \"30px\" }}>{ Math.round(emotion.probability * 100) }%</span>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      )\r\n    })\r\n  )\r\n}\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { predictEmotionAction } from \"../redux/actions\"\r\n\r\nimport { Container, Row, Col, Button, Spinner, Alert } from \"react-bootstrap\";\r\n\r\nimport { TextArea } from \"../components/TextArea\";\r\nimport { MainEmotion } from \"../components/MainEmotion\";\r\nimport { SubEmotion } from \"../components/SubEmotion\";\r\n\r\nexport const Home = () => {\r\n\r\n  const loading = useSelector(state => state.loading.loading)\r\n  const alert = useSelector(state => state.alert.data)\r\n  const dispatch = useDispatch()\r\n\r\n  const scrollToRef = (ref) => ref.current.scrollIntoView({ behavior: 'smooth' })\r\n\r\n  useEffect(() => {\r\n    if (alert.variant === \"success\") {\r\n      executeScroll()\r\n    }\r\n  }, [alert])\r\n\r\n  const scrollRef = useRef(null)\r\n  const executeScroll = () => {\r\n    setTimeout(() => {\r\n      scrollToRef(scrollRef)\r\n    }, 1000);\r\n  }\r\n\r\n  const predictEmotion = () => {\r\n    executeScroll()\r\n    dispatch(predictEmotionAction())\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-sm-center\">\r\n        <Col style={{ marginTop: \"90px\" }} md={{ span: 7 }}>\r\n          <h1 style={{ textAlign: \"center\" }} className=\"display-5 animateText\">Tensorflow Emotion Text Detector</h1>\r\n        </Col>\r\n      </Row>\r\n      <Row style={{ marginTop: \"50px\" }} className=\"justify-content-sm-center\">\r\n        <Col md={{ span: 10 }}>\r\n          <Alert show={alert.show} variant={alert.variant}>\r\n            {alert.message}\r\n          </Alert>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col style={{ textAlign: \"center\" }} md={{ span: 10, offset: 1 }}>\r\n          <TextArea />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col style={{ textAlign: \"center\", marginTop: \"30px\" }} md={{ span: 10, offset: 1 }}>\r\n          <Button disabled={loading} variant=\"primary\" onClick={() => predictEmotion()}>\r\n            {\r\n              loading ?\r\n                (\r\n                  <Spinner\r\n                    style={{ marginRight: \"10px\" }}\r\n                    animation=\"border\"\r\n                    size=\"sm\"\r\n                    role=\"status\"\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                ) : null\r\n            }\r\n            What am I feeling\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col ref={scrollRef} style={{ textAlign: \"center\", marginTop: \"50px\" }} md={{ span: 10, offset: 1 }}>\r\n          <MainEmotion />\r\n          <hr />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-sm-center\">\r\n        <SubEmotion />\r\n      </Row>\r\n      <div style={{ marginBottom: \"100px\" }}></div>\r\n    </Container>\r\n  )\r\n}\r\n","export const BASE_URL = \"http://localhost:5000\"","import * as types from \"../../utils/constants/actionContants\"\r\n\r\nconst initialState = {\r\n  query: \"Happy to see you here\"\r\n}\r\n\r\nexport const query = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_QUERY:\r\n      state = { ...state, query: action.query }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionContants\"\r\n\r\nconst initialState = {\r\n  data: {}\r\n}\r\n\r\nexport const mainEmotion = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_MAIN_EMOTION:\r\n      state = { ...state, data: action.mainEmotion }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionContants\"\r\n\r\nconst initialState = {\r\n  data: []\r\n}\r\n\r\nexport const subEmotions = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_SUB_EMOTION:\r\n      state = { ...state, data: action.subEmotion }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionContants\"\r\n\r\nconst initialState = {\r\n  loading: false\r\n}\r\n\r\nexport const loading = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.LOADING:\r\n      state = { ...state, loading: action.loading }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import * as types from \"../../utils/constants/actionContants\"\r\n\r\nconst initialState = {\r\n  data: {\r\n    show: false,\r\n    message: \"This is an alert message\",\r\n    variant: \"success\"\r\n  }\r\n}\r\n\r\nexport const alert = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ALERT:\r\n      state = { ...state, data: action.data }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return state\r\n}","import { combineReducers } from \"redux\";\r\n\r\nimport { query } from \"./queryReducer\"\r\nimport { mainEmotion } from \"./mainEmotionReducer\"\r\nimport { subEmotions } from \"./subEmotionReducer\"\r\nimport { loading } from \"./loadingReducer\"\r\nimport { alert } from \"./alertReducer\"\r\n\r\nexport const reducer = combineReducers({\r\n  query,\r\n  mainEmotion,\r\n  subEmotions,\r\n  loading,\r\n  alert\r\n});","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { reducer } from \"./reducers\";\r\n\r\nexport default createStore(reducer, applyMiddleware(thunk));","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport { Provider } from 'react-redux'\r\nimport store from \"./redux/store\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./style/customTheme.css\"\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Home } from \"./pages/Home\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <div>\r\n      <Home/>\r\n    </div>\r\n  );\r\n}"],"sourceRoot":""}